@using BootstrapBlazor.Server.Data
@using BootstrapBlazor.Server.Services
@using BootstrapBlazor.Components
@namespace BootstrapBlazor.Server.Components.Task9.UserKeywordSelection
@inject IUserKeywordSelectionService UserKeywordSelectionService
@inject ToastService ToastService

<div class="p-3">
    <div class="mb-3">
        <label class="form-label">Chọn người phụ trách:</label>
        <Select Items="UserItems" @bind-Value="SelectedUser" ShowSearch="true" IsClearable="false" />
    </div>
    
    <div class="mb-3">
        <label class="form-label">Keyword:</label>
        <div class="border rounded p-2">
            @if (SelectedKeywords?.Any() == true)
            {
                @foreach (var keyword in SelectedKeywords)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="fw-bold">@keyword.KeywordText</span>
                        <small class="text-muted">@keyword.BrandName</small>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="modal-footer">
    <Button Color="Color.Secondary" OnClick="OnCancel">Hủy</Button>
    <Button Color="Color.Primary" OnClick="OnConfirm" IsDisabled="@(SelectedUser == null)">Xác nhận</Button>
</div>

@implements IResultDialog

@code {
    [CascadingParameter(Name = "BodyContext")]
    private dynamic? BodyContext { get; set; }
    
    [CascadingParameter(Name = "ResultDialogContext")]
    private Func<DialogResult, Task>? SetResultAsync { get; set; }
    
    private List<UserIdentityDto>? Users => BodyContext?.Users;
    private List<KeywordWithUserCountDto>? SelectedKeywords => BodyContext?.SelectedKeywords;
    
    private SelectedItem? SelectedUser { get; set; }
    
    private IEnumerable<SelectedItem> UserItems => Users?.Select(u => new SelectedItem(u.Id.ToString(), u.FullName!)).ToList() ?? new();
    
    private async Task OnConfirm()
    {
        if (SelectedUser == null || SelectedKeywords == null || !SelectedKeywords.Any())
        {
            return;
        }

        try
        {
            var userId = int.Parse(SelectedUser.Value);
            var successCount = 0;
            var errorCount = 0;
            var errorMessages = new List<string>();
            
            foreach (var keyword in SelectedKeywords)
            {
                var createDto = new CreateUpdateUserKeywordSelectionDto
                {
                    KeywordId = keyword.Id,
                    UserId = userId
                };

                var result = await UserKeywordSelectionService.Create(createDto);
                if (!result.Status)
                {
                    errorCount++;
                    errorMessages.Add($"Keyword '{keyword.KeywordText}': {result.Message ?? "Lỗi không xác định"}");
                }
                else
                {
                    successCount++;
                }
            }

            // Show result messages
            if (successCount > 0)
            {
                await ToastService.Show(new ToastOption()
                {
                    Category = ToastCategory.Success,
                    Title = "Thành công",
                    Content = $"Đã thêm người phụ trách cho {successCount} keyword(s)",
                    Delay = 3000
                });
            }
            
            if (errorCount > 0)
            {
                await ToastService.Show(new ToastOption()
                {
                    Category = ToastCategory.Error,
                    Title = "Lỗi",
                    Content = $"Không thể thêm {errorCount} keyword(s): {string.Join(", ", errorMessages.Take(3))}",
                    Delay = 5000
                });
            }

            // Close dialog with success result if at least one keyword was added successfully
            if (successCount > 0)
            {
                System.Console.WriteLine($"SelectUserDialog: Success! successCount={successCount}");
                if (SetResultAsync != null)
                {
                    System.Console.WriteLine("SelectUserDialog: Calling SetResultAsync(DialogResult.Yes)");
                    await SetResultAsync(DialogResult.Yes);
                    System.Console.WriteLine("SelectUserDialog: SetResultAsync completed");
                }
                else
                {
                    System.Console.WriteLine("SelectUserDialog: ERROR - SetResultAsync is NULL!");
                }
            }
        }
        catch (Exception ex)
        {
            await ToastService.Show(new ToastOption()
            {
                Category = ToastCategory.Error,
                Title = "Lỗi",
                Content = $"Không thể thêm người phụ trách: {ex.Message}",
                Delay = 5000
            });
        }
    }
    
    private async Task OnCancel()
    {
        if (SetResultAsync != null)
        {
            await SetResultAsync(DialogResult.No);
        }
    }

    public Task<bool> OnClosing(DialogResult result)
    {
        return Task.FromResult(true);
    }

    public Task OnClose(DialogResult result)
    {
        System.Console.WriteLine($"SelectUserDialog OnClose called with result: {result}");
        return Task.CompletedTask;
    }
}
